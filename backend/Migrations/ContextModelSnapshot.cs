// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using prid_2021_g01.Models;

namespace prid_2021_g01.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("prid_2021_g01.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Author")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Activites");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreateAt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Collaboration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("UserId");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("Pos")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Participate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Participates");
                });

            modelBuilder.Entity("prid_2021_g01.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("prid_2021_g01.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ben@pen.com",
                            FirstName = "Benoît",
                            LastName = "Penelle",
                            Password = "ben",
                            Pseudo = "ben",
                            Role = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "brun@lac.com",
                            FirstName = "Bruno",
                            LastName = "Lacroix",
                            Password = "bruno",
                            Pseudo = "bruno",
                            Role = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@admin.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "admin",
                            Pseudo = "admin",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            Email = "andrei@a.com",
                            FirstName = "Andrei",
                            LastName = "Ponamarev",
                            Password = "andrei",
                            Pseudo = "andrei",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "cesar@a.com",
                            FirstName = "Cesar",
                            LastName = "Fontaine",
                            Password = "cesar",
                            Pseudo = "cesar",
                            Role = 0
                        },
                        new
                        {
                            Id = 6,
                            Email = "user@1.com",
                            FirstName = "Jean",
                            LastName = "Chateau",
                            Password = "user",
                            Pseudo = "jean",
                            Role = 0
                        },
                        new
                        {
                            Id = 7,
                            Email = "user2@2.com",
                            FirstName = "Paul",
                            LastName = "Champ",
                            Password = "user",
                            Pseudo = "paul",
                            Role = 0
                        },
                        new
                        {
                            Id = 8,
                            Email = "user@3.com",
                            FirstName = "Isa",
                            LastName = "Belle",
                            Password = "user",
                            Pseudo = "isa",
                            Role = 0
                        },
                        new
                        {
                            Id = 9,
                            Email = "user2@4.com",
                            FirstName = "Mat",
                            LastName = "Thieu",
                            Password = "user",
                            Pseudo = "mat",
                            Role = 0
                        });
                });

            modelBuilder.Entity("prid_2021_g01.Models.Activity", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Board", "Board")
                        .WithMany("Activities")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Board", b =>
                {
                    b.HasOne("prid_2021_g01.Models.User", "Owner")
                        .WithMany("Boards")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Card", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Column", "Column")
                        .WithMany("Cards")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prid_2021_g01.Models.User", "Owner")
                        .WithMany("Cards")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Collaboration", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Board", "Board")
                        .WithMany("Collaborater")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prid_2021_g01.Models.User", "Participant")
                        .WithMany("BoardParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Column", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Participate", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Card", "Card")
                        .WithMany("Collaborater")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prid_2021_g01.Models.User", "Participant")
                        .WithMany("CardParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("prid_2021_g01.Models.Tag", b =>
                {
                    b.HasOne("prid_2021_g01.Models.Card", "Card")
                        .WithMany("Tags")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
